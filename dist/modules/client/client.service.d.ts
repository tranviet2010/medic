import { Client, ClientDocument } from './schemas/client.schema';
import { Model } from 'mongoose';
import { MailService } from '../mail/mail.service';
import { SignUpDto } from './dto/sign-up.dto';
import { GetClientDto } from './dto/get-client.dto';
import { Cache } from 'cache-manager';
import { SignUpByCodeDto } from './dto/sign-up-by-code.dto';
import { CreateClientDto } from './dto/create-client.dto';
import { ForgotPasswordDto } from './dto/forgot-password.dto';
import ChangePasswordByCodeDto from './dto/change-password-by-code.dto';
import ChangePasswordDto from './dto/change-password.dto';
import { GetClientByPhoneOrderDto, GetClientsDto } from './dto/get-clients.dto';
import { ResPagingDto } from 'src/shares/dtos/pagination.dto';
import { UserFacebookInfoDto } from '../auth/dto/user-facebook-info.dto';
import { UserGoogleInfoDto } from '../auth/dto/user-google-info.dto';
export declare class ClientService {
    private clientModel;
    private mailService;
    private cacheManager;
    constructor(clientModel: Model<ClientDocument>, mailService: MailService, cacheManager: Cache);
    findOne(condition: GetClientDto, selectPassword?: boolean): Promise<Client>;
    findById(_id: string): Promise<Client>;
    signUp(createClientDto: CreateClientDto | null): Promise<void>;
    activeAccout(signUpDto: any): Promise<void>;
    signUpEmail(signUpDto: SignUpDto): Promise<void>;
    signUpByCode(signUpByCodeDto: SignUpByCodeDto): Promise<void>;
    createClientSignUpByCode(createClientDto: CreateClientDto): Promise<Client>;
    createClient(createClientDto: CreateClientDto): Promise<Client>;
    forgotPassword(forgotPasswordDto: ForgotPasswordDto): Promise<void>;
    changePasswordByCode(changePasswordByCode: ChangePasswordByCodeDto): Promise<void>;
    checkVerificationCode(verifyCode: string, email: string): Promise<Client>;
    changePassword(changePasswordDto: ChangePasswordDto): Promise<void>;
    findAll(getUsersDto: GetClientsDto): Promise<ResPagingDto<Client[]>>;
    findOrCreateFacebookUser(profile: UserFacebookInfoDto): Promise<Client>;
    findOrCreateGoogleUser(profile: UserGoogleInfoDto): Promise<Client>;
    searchClientInOrder(getClientByPhoneOrderDto: GetClientByPhoneOrderDto): Promise<any>;
}
